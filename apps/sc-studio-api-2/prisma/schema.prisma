datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt      DateTime        @default(now())
  firstName      String?
  id             String          @id @default(cuid())
  lastName       String?
  password       String
  rewards        UserReward[]
  roles          Json
  smartContracts SmartContract[]
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  userSpents     UserSpent[]
}

model UserSpent {
  amount    Decimal?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model UserReward {
  appliedAt DateTime?
  createdAt DateTime  @default(now())
  expiredAt DateTime?
  id        String    @id @default(cuid())
  log       String?
  point     Int?
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model SmartContract {
  createdAt         DateTime                @default(now())
  deployedAt        DateTime?
  description       String?
  functionalSpec    Json?
  id                String                  @id @default(cuid())
  name              String
  requirements      String?
  smartContractLogs SmartContractLog[]
  sourceCodeUrl     String?
  status            EnumSmartContractStatus
  testCase          Json?
  testScriptUrl     String?
  updatedAt         DateTime                @updatedAt
  user              User?                   @relation(fields: [userId], references: [id])
  userId            String?
}

model SmartContractLog {
  createdAt       DateTime       @default(now())
  id              String         @id @default(cuid())
  log             String?
  smartContract   SmartContract? @relation(fields: [smartContractId], references: [id])
  smartContractId String?
  updatedAt       DateTime       @updatedAt
}

model Reward {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  point       Int?
  updatedAt   DateTime @updatedAt
}

enum EnumSmartContractStatus {
  WorkInProgress
  Deployed
}
