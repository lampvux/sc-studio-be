/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import {
  ValidateNested,
  IsOptional,
  IsEnum,
  IsDate,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumChatThreadChatType } from "./EnumChatThreadChatType";
import { User } from "../../user/base/User";
import { Rate } from "../../rate/base/Rate";

@ObjectType()
class ChatThread {
  @ApiProperty({
    required: false,
    type: () => ChatMessage,
  })
  @ValidateNested()
  @Type(() => ChatMessage)
  @IsOptional()
  chatMessages?: ChatMessage | null;

  @ApiProperty({
    required: true,
    enum: EnumChatThreadChatType,
  })
  @IsEnum(EnumChatThreadChatType)
  @Field(() => EnumChatThreadChatType, {
    nullable: true,
  })
  chatType?: "expert" | "AI";

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  closedAt!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  expertId?: User | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Rate,
  })
  @ValidateNested()
  @Type(() => Rate)
  @IsOptional()
  rates?: Rate | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  userId?: User;
}

export { ChatThread as ChatThread };
