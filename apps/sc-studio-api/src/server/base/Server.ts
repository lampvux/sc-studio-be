/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  IsOptional,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { ServerCost } from "../../serverCost/base/ServerCost";
import { ServerLog } from "../../serverLog/base/ServerLog";
import { EnumServerStatus } from "./EnumServerStatus";
import { User } from "../../user/base/User";

@ObjectType()
class Server {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  deployedAt!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ServerCost],
  })
  @ValidateNested()
  @Type(() => ServerCost)
  @IsOptional()
  serverCosts?: Array<ServerCost>;

  @ApiProperty({
    required: false,
    type: () => [ServerLog],
  })
  @ValidateNested()
  @Type(() => ServerLog)
  @IsOptional()
  serverLogs?: Array<ServerLog>;

  @ApiProperty({
    required: false,
    enum: EnumServerStatus,
  })
  @IsEnum(EnumServerStatus)
  @IsOptional()
  @Field(() => EnumServerStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  userId?: Array<User>;
}

export { Server as Server };
