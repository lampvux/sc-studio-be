datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  billingInformation  String?
  chatMessages        ChatMessage[]
  chatThreads         ChatThread[]    @relation(name: "ChatThreadUserIdUserChatThreads")
  code_2Fa            String?
  createdAt           DateTime        @default(now())
  email               String?
  enabled_2Fa         Boolean?
  expertChatThread    ChatThread[]    @relation(name: "expertChatThread")
  expiredAt_2Fa       DateTime?
  firstName           String?
  googleUid           String?
  id                  String          @id @default(cuid())
  lastName            String?
  loggedInAt          DateTime?
  password            String
  publicWalletAddress String?
  roles               Json
  servers             Server[]
  status              EnumUserStatus?
  tokenExpirationAt   DateTime?
  type_2Fa            String?
  updatedAt           DateTime        @updatedAt
  username            String          @unique
  userToken           String?
  verifiedAt          DateTime?
}

model Server {
  createdAt   DateTime         @default(now())
  deployedAt  DateTime?
  description String?
  id          String           @id @default(cuid())
  name        String
  serverCosts ServerCost[]
  serverLogs  ServerLog[]
  status      EnumServerStatus
  updatedAt   DateTime         @updatedAt
  userId      User[]
}

model ServerLog {
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  log         String?
  serverId    Server   @relation(fields: [server_logs], references: [id])
  server_logs String
  updatedAt   DateTime @updatedAt
}

model ServerCost {
  cost        Decimal?
  createdAt   DateTime  @default(now())
  endTime     DateTime?
  id          String    @id @default(cuid())
  serverId    Server    @relation(fields: [server_cost], references: [id])
  server_cost String
  startTime   DateTime?
  unit        String?
  updatedAt   DateTime  @updatedAt
}

model ChatThread {
  chatMessages       ChatMessage?
  chatType           EnumChatThreadChatType
  closedAt           DateTime?
  createdAt          DateTime               @default(now())
  expertId           User?                  @relation(name: "expertChatThread", fields: [expert_chat_thread], references: [id])
  expert_chat_thread String?
  id                 String                 @id @default(cuid())
  rates              Rate?                  @relation(fields: [chat_rate], references: [id])
  chat_rate          String?                @unique
  updatedAt          DateTime               @updatedAt
  userId             User                   @relation(name: "ChatThreadUserIdUserChatThreads", fields: [user_chat_thread], references: [id])
  user_chat_thread   String
}

model Rate {
  chatThreads ChatThread?
  createdAt   DateTime    @default(now())
  id          String      @id @default(cuid())
  log         String?
  rating      Decimal
  updatedAt   DateTime    @updatedAt
}

model ChatMessage {
  createdAt DateTime   @default(now())
  fileTitle String?
  fileUrl   String?
  id        String     @id @default(cuid())
  message   String?
  thread    ChatThread @relation(fields: [chat], references: [id])
  chat      String     @unique
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String
}

enum EnumUserStatus {
  Option1
}

enum EnumServerStatus {
  WorkInProgress
  Deployed
  Running
  Stopped
}

enum EnumChatThreadChatType {
  expert
  AI
}
